---
import Layout from '../layouts/Page.astro';
---

<Layout
	title="Bitcoin"
	description="Bitcoin price chart and information"
>
	<div class="bitcoin-container">
		<div class="chart-container">
			<canvas id="bitcoinChart"></canvas>
		</div>
		<div class="price-info">
			<div id="currentPrice">Loading...</div>
			<div id="priceChange">Loading...</div>
		</div>
	</div>

	<style>
		.bitcoin-container {
			max-width: 800px;
			margin: 2em auto;
			padding: 1em;
		}
		.chart-container {
			position: relative;
			height: 400px;
			margin-bottom: 2em;
		}
		.price-info {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 1em;
			background: rgb(var(--gray-light));
			border-radius: 8px;
		}
		#currentPrice {
			font-size: 1.5em;
			font-weight: bold;
		}
		#priceChange {
			font-size: 1.2em;
		}
		.positive {
			color: #22c55e;
		}
		.negative {
			color: #ef4444;
		}
	</style>

	<script>
		import Chart from 'chart.js/auto';
		import type { TooltipItem } from 'chart.js';

		interface PriceData {
			date: Date;
			value: number;
		}

		async function fetchHistoricalData(): Promise<PriceData[]> {
			try {
				const response = await fetch('/BTCGBP.csv');
				const csvText = await response.text();
				
				// Parse CSV data
				const rows = csvText.split('\n').slice(1); // Skip header row
				return rows
					.filter(row => row.trim()) // Remove empty rows
					.map(row => {
						const [date, value] = row.split(',');
						return {
							date: new Date(date),
							value: parseFloat(value)
						};
					})
					.sort((a, b) => a.date.getTime() - b.date.getTime());
			} catch (error) {
				console.error('Error loading historical data:', error);
				return [];
			}
		}

		async function fetchLivePrice(): Promise<number | null> {
			try {
				const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=gbp&include_24hr_change=true');
				const data = await response.json();
				return data.bitcoin.gbp;
			} catch (error) {
				console.error('Error fetching live price:', error);
				return null;
			}
		}

		async function updateBitcoinData() {
			try {
				// Fetch historical data from CSV
				const historicalData = await fetchHistoricalData();
				if (historicalData.length === 0) {
					throw new Error('No historical data available');
				}

				// Fetch current price
				const currentPrice = await fetchLivePrice();
				if (currentPrice === null) {
					throw new Error('Could not fetch current price');
				}

				// Calculate price change
				const firstPrice = historicalData[0].value;
				const priceChange = ((currentPrice - firstPrice) / firstPrice) * 100;
				
				// Update price info
				const currentPriceEl = document.getElementById('currentPrice');
				const priceChangeEl = document.getElementById('priceChange');
				
				if (currentPriceEl && priceChangeEl) {
					currentPriceEl.textContent = `£${currentPrice.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
					priceChangeEl.textContent = `${priceChange >= 0 ? '+' : ''}${priceChange.toFixed(2)}%`;
					priceChangeEl.className = priceChange >= 0 ? 'positive' : 'negative';
				}

				// Create the chart
				const canvas = document.getElementById('bitcoinChart') as HTMLCanvasElement;
				if (!canvas) return;

				const ctx = canvas.getContext('2d');
				if (!ctx) return;

				new Chart(ctx, {
					type: 'line',
					data: {
						labels: historicalData.map(price => price.date.toLocaleDateString()),
						datasets: [{
							label: 'Bitcoin Price (GBP)',
							data: historicalData.map(price => price.value),
							borderColor: 'rgb(255, 159, 64)',
							backgroundColor: 'rgba(255, 159, 64, 0.1)',
							fill: true,
							tension: 0.4
						}]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							legend: {
								display: false
							},
							tooltip: {
								callbacks: {
									label: function(tooltipItem: TooltipItem<'line'>) {
										const value = tooltipItem.raw as number;
										return `£${value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
									}
								}
							}
						},
						scales: {
							y: {
								ticks: {
									callback: function(tickValue: number | string) {
										if (typeof tickValue === 'number') {
											return '£' + tickValue.toLocaleString();
										}
										return tickValue;
									}
								}
							}
						}
					}
				});
			} catch (error) {
				console.error('Error updating Bitcoin data:', error);
				const currentPriceEl = document.getElementById('currentPrice');
				const priceChangeEl = document.getElementById('priceChange');
				
				if (currentPriceEl) currentPriceEl.textContent = 'Error loading data';
				if (priceChangeEl) priceChangeEl.textContent = 'Please try again later';
			}
		}

		// Load the data when the page loads
		document.addEventListener('DOMContentLoaded', updateBitcoinData);
	</script>
</Layout>

